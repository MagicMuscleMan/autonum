% \iffalse meta-comment
% !TEX program  = pdfLaTeX
%<*internal>
\iffalse
%</internal>
%<*readme>
----------------------------------------------------------------
autonum --- Automatic number referenced equations
E-mail: pat_h@web.de
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------

This is the autonum package, automatically numbering only the equations which
are referenced.
This package is similar to mathtools' showonlyrefs option, but without
introducing the bug to overwrite long equations with the equation number.

Usage: \usepackage{autonum}

Everything else should happen automatically.
To use autonum together with other packages, load autonum last.
%</readme>
%<readme>\endbatchfile
%<*internal>
\fi
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
%</internal>
%<*install>
\input docstrip.tex
\keepsilent
\askforoverwritefalse
\preamble
----------------------------------------------------------------
autonum --- Automatic number referenced equations
E-mail: pat_h@web.de
Released under the LaTeX Project Public License v1.3c or later
See http://www.latex-project.org/lppl.txt
----------------------------------------------------------------

\endpreamble
\postamble

Copyright (C) 2012 by Patrick Häcker <pat_h@web.de>

This work may be distributed and/or modified under the
conditions of the LaTeX Project Public License (LPPL), either
version 1.3c of this license or (at your option) any later
version.  The latest version of this license is in the file:

http://www.latex-project.org/lppl.txt

This work is "maintained" (as per LPPL maintenance status) by
Patrick Häcker.

This work consists of the file  autonum.dtx
and the derived files           autonum.ins,
                                autonum.pdf and
                                autonum.sty.

\endpostamble
\usedir{tex/latex/autonum}
\generate{
  \file{autonum.sty}{\from{autonum.dtx}{package}}
}
%</install>
%<install>\endbatchfile
%<*internal>
\usedir{source/latex/autonum}
\generate{
  \file{autonum.ins}{\from{autonum.dtx}{install}}
}
\nopreamble\nopostamble
\usedir{doc/latex/autonum}
\generate{
  \file{README.txt}{\from{autonum.dtx}{readme}}
}
\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</internal>
%<*package>
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{autonum}[2012/05/26 v0.1 autonum LaTeX package]
\RequirePackage{etoolbox}
\RequirePackage{amsmath}
\RequirePackage[absolute]{textpos}
%</package>
%<*driver>
\documentclass{ltxdoc}
\usepackage[utf8]{inputenx}
\usepackage[T1]{fontenc}
\usepackage{lmodern}
\usepackage{amsmath}
\usepackage{\jobname}
\usepackage[numbered]{hypdoc}
\usepackage{autonum}%
\hypersetup{pdftitle=The autonum package}
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
%\GetFileInfo{\jobname.sty}
%
%\title{^^A
%  \textsf{autonum} --- automatic number referenced equations\thanks{^^A
%    This file describes version \fileversion, last revised \filedate.^^A
%  }^^A
%}
%\author{^^A
%  Patrick Häcker\thanks{E-mail: pat\_h@web.de}^^A
%}
%\date{Released \filedate}
%
%\maketitle
%
%\changes{v0.1}{2012/05/26}{First public release}
%
% \section{Introduction}
% In \LaTeX, the user has to decide manually which equation gets a number by optionally adding a star in the math environments. Authors who do not want to think about the numbering during the writing (and maybe they should not), often use the environments without stars. As default these users get all equations numbered, although there are \href{http://tex.stackexchange.com/q/29267/7323}{different opinions} about what should be numbered.
%
% The other automatic possibility one can think of is to number only the referenced equations. The \href{http://www.ctan.org/tex-archive/macros/latex/contrib/mh/}{mathtools} package's option \texttt{showonlyrefs} seems to be the solution for those, who want to have the referenced equations numbered only. Unfortunately for \href{http://www.ctan.org/pkg/amsmath}{amsmath} users this also means a step backwards, as the numbering can overwrite parts of the equation according to its documentation. Generally, this options seems to be quite unreliable. The autonum package implements the numbering of referenced equations only without this deficiencies.
%^^A This currently does not work with cleveref, as equations without a number increment the equation counter, too. As placing the labels does not always work correctly, \cmd{\mathtoolsset{showonlyrefs}} is not an option (see mathtools documentation, bottom of page 10).
%
% \section{Usage and Examples}
% To get the automatic numbering of referenced equations, simply load the package:
%
% \vspace{0.5em}
% \cmd{\usepackage\{autonum\}}
% \vspace{0.5em}
%
% The recommended style is to add a label to each equation. Then, simply use the needed references. Never use the starred form.
%
%\begin{macro}{equation}
% The following examples show the results of the equation environment after loading the package. Now let's reference the third equation: \ref{alreadyReferenced}.
% \makeatletter
% \begin{equation*}
% 	1 = 1\quad(\text{equation without label})
% \end{equation*}
%
% \begin{equation*}\label{notReferenced}
% 	2 = 2\quad(\text{equation with label, not referenced})
% \end{equation*}
%
%^^A \autonum@equationOld\label{alreadyReferenced}
%^^A 	3 = 3\quad(\text{equation with label, already referenced})
%^^A \autonum@endequationOld
%
%^^A \autonum@equationOld\label{referencedLater}
%^^A 	4 = 4\quad(\text{equation with label, referenced later})
%^^A \autonum@endequationOld
% \makeatother
% Now let's reference the fourth equation: \ref{referencedLater}. The first and the second equations do not get a number, as they are not referenced.
%
% If you want to try an example yourself, you can take this one, where only the first equation gets a number:
%
% \vspace{0.5em}
% \noindent\cmd{\documentclass\{minimal\}}\\
% \cmd{\usepackage\{autonum\}}\\
% \cmd{\begin\{document\}}\\
% \indent\cmd{\begin\{equation\}}\cmd{\label\{a\}}\\
% \indent\indent a\\
% \indent\cmd{\end\{equation\}}\\
% \indent\cmd{\begin\{equation\}}\cmd{\label\{b\}}\\
% \indent\indent b\\
% \indent\cmd{\end\{equation\}}\\
% \indent\cmd{\ref\{a\}}\\
% \cmd{\end\{document\}}
% \vspace{0.5em}
%
% To get the correct references up to three compiliation runs are necessary when the autonum package is used (as always in \TeX\ this cannot be guranteed, so in rare cases even that is not enough). This is one additional run compared to the default referencing mode, as one run is needed to check if an equation is used.
%\end{macro}
%
%\begin{macro}{equation+}
% In the probably rare case, that an equation is very important and not references within the text, but some other person wants to reference to that equation, you can use \cmd{\begin\{equation+\}} and \cmd{\end\{equation+\}}. The equation is then numbered in all cases (having a label or not, being referenced or not). This feature has been added, so that all \href{http://tex.stackexchange.com/a/52287}{three referencing practices} are supported in \LaTeX\ with as much automation as possible.
%\end{macro}
%
%^^A \documentclass{article}
%^^A \usepackage{amsmath}
%^^A \usepackage{mathtools}
%^^A \mathtoolsset{showonlyrefs,showmanualtags}
%^^A \begin{document}
%^^A \begin{equation}
%^^A \sum\sum\sum\sum\sum\sum\sum\sum\sum\sum\sum\sum\sum\sum\sum\sum\sum\sum\sum\sum\sum\sum\sum\sum\sum\sum\label{myequation}
%^^A \end{equation}
%^^A Text \ref{myequation}
%^^A \end{document}
%
%
% \section{Compatibility}
% \subsection{Load Order}
% The autonum package is very careful to not break other packages, but other packages might break autonum. Thus, autonum should be loaded very late. Normally amsmath is automatically loaded to make use of the more advances math environments. Nevertheless, to use other packages, it might be necessary to load amsmath manually. To use autonum with amsmath, hyperref and cleveref (\cmd{\cref}) for example, the order must be amsmath $\rightarrow$ hyperref $\rightarrow$ cleveref $\rightarrow$ autonum. If a wrong order has been active, the aux file must potentially be manually deleted to get rid of compile errors. As default only the \cmd{\ref} and the \cmd{cref} commands are supported. You can add other commands by executing \cmd{\let}\cmd{\ref}\cmd{\otherref} in the preamble. The best place to put the \cmd{\let} probably is directly before loading numref. The support of autonum without amsmath has been discontinued, but please contact the author if you are interested in using autonum without amsmath.
%
% \subsection{Reference commands}
% As default the \cmd{\ref} and cleveref's \cmd{\cref} commands are supported. New reference commands can be supported by executing \cmd{\let}\cmd{\ref}\cmd{\NewReferenceCommand}. If the original \cmd{\ref} command should not be overwritten, you can instead use \cmd{\autonum@generatePatchedReference}\{\cmd{\NewReferenceCommand}\}.
%
% \section{Further Ideas}
% \begin{itemize}
% \item A warning could be printed, if another compile is necessary.
% \item A similar approch could be used for figure and table environments. There, a warning could be printed, if an environment is not referenced.
% \item Instead of "+" a "*" could be used.
% \item The starred forms of the environments could be undefined with \csundef{equation*} and \csundef{endequation*}.
% \item If a reference is used before the label is defined, the reference information is saved in a variable and can be used later in the current run when processing the label. It does not have to be saved to the aux file. If a reference is used after defining the label, the reference information is saved in the aux file and can be used in the next run when processing the label. The information does not have to be saved into a variable, as a label must only be defined once and the definition has already happened. Unfortunately, this would make it necessary to distinguish between definitions in the current and in the last run, as otherwise this leads either to oscillation or to defining everything in the end (depending if csdefaux or csdefall is used in the not-defined case), which is probably not worth the effort.
% \end{itemize}
%
% \section{Implementation}
% The basic idea is to write into the aux file and save a variable whenever a label is referenced, so that the information is available in the current and in the next run. The label information is passed from the label command to the newline command. The newline command uses the label and the reference information to possibly add a \cmd{\notag} command, deciding if it is referenced or not.
%
% Calling the old newline command leads to a redefinition (overwriting, not patching) of the (current) newline command (prooved by using \cmd{\show}\cmd{\\} before and after the call to amsmath's newline command) when using local definitions. As amsmath behaves like a virus then, the patched newline function is only called for the first newline. After the first call, amsmath's hijacked newline is used directly without giving a chance to do something useful. To correct this behaviour, the newline command would need to be patched again. Unfortunately, \cmd{\let} cannot be used to save the current command, because the copy generated by \cmd{\let} is deleted by amsmath (WTF?). To avoid all this, some global definitions are used.

%\begin{macro}{\csxdefaux}
% This command is similar to the \cmd{\csxdef} command from the package etoolbox, but instead of defining the command immediately, it is defined in the next run by writing it to the aux file. The name is given by the first argument (which may not have a leading backslash). The second argument is the replacement text. This command would be a candidate for inclusion into etoolbox. \cmd{\ifcsdef} can be used to check, if the command has been defined. See also http://tex.stackexchange.com/a/49035
% Usage: \cmd{\csxdefaux{csname}{replacement}}
%    \begin{macrocode}
\def\csxdefaux#1#2{%
%    \end{macrocode}
	% The expandafter commands are used to first expand the \cmd{\csname}-\cmd{\endcsname}. Then there is a command definition left, where the command and its replacement (which can also be a command) are protected by \cmd{\string} to create the command in the next run (when the aux file is read) and not in the current run (when the aux file is written).
%    \begin{macrocode}
	\protected@write\@mainaux{}{%
		\expandafter\string\expandafter\xdef\expandafter\string\csname #1\endcsname{#2}%
	}%
}
%    \end{macrocode}
%\end{macro}

%\begin{macro}{\csxdefall}
% This command simply combines the commands \cmd{\csxdef} and \cmd{\csxdefaux}. This command would be a candidate for inclusion into etoolbox.
%    \begin{macrocode}
\def\csxdefall#1#2{%
	\csxdefaux{#1}{#2}%
	\csxdef{#1}{#2}%
}
%    \end{macrocode}
%\end{macro}

%\begin{macro}{\ifcsedef}
% This command is similar to the \cmd{\ifcsdef} test from the package etoolbox, but the command sequence gets fully expanded before it is evaluated.. This command would be a candidate for inclusion into etoolbox.
%    \begin{macrocode}
\def\ifcsedef#1#2#3{%
	\edef\autonum@ifcsedefTemp{#1}%
	\expandafter\ifcsdef\expandafter{\autonum@ifcsedefTemp}{#2}{#3}%
	\undef{\autonum@ifcsedefTemp}%
}
%    \end{macrocode}
%\end{macro}

% This is needed to not get overwritten by other packages. The package autonum only overwrites some commands whose name start with \cmd{\autonum}. Other commands are only patched, so the currently valid command gets called, too. So although not very polite, this behaviour seems reasonable.
%    \begin{macrocode}
\AtBeginDocument{%
%    \end{macrocode}
	% All of amsmath's environments are redefined.
%    \begin{macrocode}
	% TODO: alignat funktioniert nicht
	% TODO: flalign funktioniert nicht
% 	\forcsvlist{\autonum@patchEnvironment}{equation,gather,multline,align,flalign,alignat}
% 	\forcsvlist{\autonum@patchEnvironment}{equation,gather,multline,align,flalign}
	\forcsvlist{\autonum@patchEnvironment}{equation,gather,multline,align}
% 	\autonum@patchEnvironment{alignat}
%    \end{macrocode}

	% \cmd{\[} and \cmd{\]} are defined as \cmd{\align}. Due to the improved logic, the old command's capabilities are basically a subset of the new capabilities.
%    \begin{macrocode}
	\def\[#1\]{\begin{align}#1\end{align}}
%    \end{macrocode}

	% Support the normal \cmd{\ref} command and, if available, the \cmd{\cref} command from cleveref.
%    \begin{macrocode}
	\autonum@generatePatchedReference{ref}%
	\ifdef{\cref}{%
		\autonum@generatePatchedReference{cref}%
	}{}%
%    \end{macrocode}
%    \begin{macrocode}
}
%    \end{macrocode}

%\begin{macro}{\autonum@patchEnvironment}
% Patch a mathematical environment to automatically show an equation's number, if a part is referenced and do not use a number otherwise. For completeness, the original definition (numbering every part of an displayed equation structure) is made available using a different name.  Do not redefine environment before getting the original label and newline commands.
%    \begin{macrocode}
\def\autonum@patchEnvironment#1{
	\autonum@saveEnvironmentSubcommands{#1}%
	\autonum@renameEnvironment{#1}%
	\autonum@changeEnvironment{#1}%
	\autonum@generatePatchedLabel{#1}%
	\autonum@generatePatchedNewline{#1}%
}
%    \end{macrocode}
%\end{macro}

%\begin{macro}{\autonum@saveEnvironmentSubcommands}
% This code is to save the newline code used in a mathematic display environment so that it can be used later. This is necessary, as saving it in the instance of the environment, where it should be used, does not work.
%    \begin{macrocode}
\def\autonum@saveEnvironmentSubcommands#1{%
	\begin{textblock}{1}[1,1](0,0)%
		\begin{#1}%
%    \end{macrocode}
			% Using global here is necessary, to get the information out of the environment.
%    \begin{macrocode}
			\global\cslet{autonum@label#1}{\label}%
			\global\cslet{autonum@newline#1}\\%
%    \end{macrocode}
			% Use \cmd{\notag} to not increase the equation counter (otherwise the first equation shown would have the number 2).
%    \begin{macrocode}
			\notag%
		\end{#1}%
	\end{textblock}%
}
%    \end{macrocode}
%\end{macro}

%\begin{macro}{\autonum@renameEnvironment}
% Rename the old environment to be accessible with an appended + by saving the original environment using a different name.
%    \begin{macrocode}
\def\autonum@renameEnvironment#1{%
	\csletcs{autonum@#1Old}{#1}%
	\csletcs{autonum@end#1Old}{end#1}%
	\newenvironment{#1+}{%
		\csuse{autonum@#1Old}%
	}{%
		\csuse{autonum@end#1Old}%
	}%
}
%    \end{macrocode}
%\end{macro}

%\begin{macro}{\autonum@changeEnvironment}
% Now change the environment. This command only supports displayed equation structures and is not suited for other environments (as e.g. figures).
%    \begin{macrocode}
\def\autonum@changeEnvironment#1{%
	\renewenvironment{#1}{%
%    \end{macrocode}
		% Prepare the label and the newline commands and begin the displayed equation environment.
%    \begin{macrocode}
		\autonum@saveSubcommands
		\csuse{autonum@#1Old}%
		\autonum@patchSubcommands{#1}%
	}{%
%    \end{macrocode}
		% Possibly hide the number of the last equation in the displayed equation environment, end the latter one and restore the subcommands.
%    \begin{macrocode}
		\autonum@possiblyHideNumber
		\csuse{autonum@end#1Old}%
		\autonum@restoreSubcommands
	}%
}
%    \end{macrocode}
%\end{macro}

%\begin{macro}{\autonum@saveSubcommands}
% Save the current newline and label commands.
%    \begin{macrocode}
\def\autonum@saveSubcommands{%
	\let\autonum@labelNormal\label%
	\let\autonum@newlineNormal\\%
}
%    \end{macrocode}
%\end{macro}

%\begin{macro}{\autonum@patchSubcommands}
% Patch the label command, as some special data has to be saved with each usage. In order to support multi-line equations, the counter must be increased in every line, as every line is a possible reference target. Therefore, \\ has to be overwritten, too. This must be global, as amsmath is very annoying with overwriting local definitions, e.g. in align environments.
%    \begin{macrocode}
\def\autonum@patchSubcommands#1{%
	\global\letcs{\label}{autonum@patched#1Label}%
	\global\letcs{\\}{autonum@patched#1Newline}%
}
%    \end{macrocode}
%\end{macro}

%\begin{macro}{\autonum@restoreSubcommands}
% Restore the newline and label commands. This must be global, as it had been overwritten globally in \cmd{\autonum@patchSubcommands}.
%    \begin{macrocode}
\def\autonum@restoreSubcommands{%
	\global\let\label\autonum@labelNormal%
	\global\let\\\autonum@newlineNormal%
}
%    \end{macrocode}
%\end{macro}

%\begin{macro}{\autonum@generatePatchedLabel}
% Use an extra command to patch the used label command for efficiency.
%    \begin{macrocode}
\def\autonum@generatePatchedLabel#1{%
	\csdef{autonum@patched#1Label}##1{%
	%    \end{macrocode}
		% The labeling infomation is needed in the newline command. Therefore, the following variable is used to store it until the next newline command. As the definition is local and every line in an multi-line displayed math environment has its own group, the variable does not have to be deleted explicitly.
	%    \begin{macrocode}
		\ifdef{\autonum@currentLabel}{%
			\PackageError{autonum}{Two succeeding \string\label's detected}{Did you forget a \string\\?}%
		}{%
			\def\autonum@currentLabel{##1}%
		}%
	%    \end{macrocode}
		% The environment's original label command is called to do the real labeling. As it checks for erroneous succeeding labels using \cmd{df@label}, this variable has to be emptied before every call.
	%    \begin{macrocode}
		\let\df@label\@empty%
		\csuse{autonum@label#1}{##1}%
	}%
}
%    \end{macrocode}
%\end{macro}

%\begin{macro}{\autonum@generatePatchedNewline}
% This command generates patched newline commands for displayed math environments, so that they can simply be activated when needed.
%    \begin{macrocode}
\def\autonum@generatePatchedNewline#1{%
	\csdef{autonum@patched#1Newline}{%
		\autonum@possiblyHideNumber
		\csuse{autonum@newline#1}%
	}
}
%    \end{macrocode}
%\end{macro}

%\begin{macro}{\autonum@possiblyHideNumber}
% Define this command, which can hide the current line's number if the label is not referenced.
%    \begin{macrocode}
\def\autonum@possiblyHideNumber{
	\ifdef{\autonum@currentLabel}{%
		\ifcsedef{autonum@\csuse{autonum@currentLabel}Referenced}{%
		}{%
			\notag%
		}
%    \end{macrocode}
		% The current label does not have to be cleaned, as every line is a separate cell \href{http://tex.stackexchange.com/q/58190,}{defining a local group} in an displayed math environment.
%    \begin{macrocode}
	}{%
		\notag%
	}%
}
%    \end{macrocode}
%\end{macro}

%\begin{macro}{\autonum@generatePatchedReference}
% This command can patch arbitrary reference commands. The patch logic can be different to patching the label command, as the references have to be patched only once, so optimizing for speed is counter-productive.
%    \begin{macrocode}
\def\autonum@generatePatchedReference#1{%
	\csletcs{autonum@reference#1Old}{#1}%
	\csdef{#1}##1{%
%    \end{macrocode}
		% Mark label as referenced. The reference information is stored into a variable (for the current run) and into the aux file (for the next run), so it does not matter if the reference is used before or after the definition of the label. Saving into a variable saves one compilation run, although still up to three are needed to get everything right.
%    \begin{macrocode}
		\csxdefall{autonum@##1Referenced}{}%
%    \end{macrocode}
		% Call the old reference command.
%    \begin{macrocode}
		\csuse{autonum@reference#1Old}{##1}%
	}%
}
%    \end{macrocode}
%\end{macro}

%\StopEventually{^^A
%  \PrintChanges
%^^A  \PrintIndex
%}
%
%\Finale